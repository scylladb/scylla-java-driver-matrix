diff --git c/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java w/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
index 32e8c3929..292a8dfa5 100644
--- c/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
+++ w/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
@@ -58,7 +58,7 @@ public class NodeMetadataIT {
                   assertThat(broadcastAddress.getAddress()).isEqualTo(connectAddress.getAddress()));
       assertThat(node.getListenAddress().get().getAddress()).isEqualTo(connectAddress.getAddress());
       assertThat(node.getDatacenter()).isEqualTo("dc1");
-      assertThat(node.getRack()).isEqualTo("r1");
+      assertThat(node.getRack()).isEqualTo("RAC1");
       if (!CcmBridge.DSE_ENABLEMENT) {
         // CcmBridge does not report accurate C* versions for DSE, only approximated values
         assertThat(node.getCassandraVersion()).isEqualTo(ccmRule.getCassandraVersion());
diff --git c/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/SchemaChangesIT.java w/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/SchemaChangesIT.java
index fc6d1a847..5e6effc1f 100644
--- c/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/SchemaChangesIT.java
+++ w/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/SchemaChangesIT.java
@@ -54,7 +54,7 @@ public class SchemaChangesIT {
     CustomCcmRule.Builder builder = CustomCcmRule.builder();
     if (!CcmBridge.DSE_ENABLEMENT
         && CcmBridge.VERSION.nextStable().compareTo(Version.V4_0_0) >= 0) {
-      builder.withCassandraConfiguration("enable_materialized_views", true);
+      // builder.withCassandraConfiguration("enable_materialized_views", true);
     }
     CCM_RULE = builder.build();
   }
diff --git c/test-infra/revapi.json w/test-infra/revapi.json
index 3cfbc8b53..0fa33a041 100644
--- c/test-infra/revapi.json
+++ w/test-infra/revapi.json
@@ -171,6 +171,16 @@
         "code": "java.method.removed",
         "old": "method void com.datastax.oss.driver.api.testinfra.ccm.CcmRule::reloadCore(int, java.lang.String, java.lang.String, boolean)",
         "justification": "Modifying the state of a globally shared CCM instance is dangerous"
+      },
+      {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
+      },
+      {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
       }
     ]
   }
diff --git c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
index c902434aa..0aa9bc8e1 100644
--- c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
+++ w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/BaseCcmRule.java
@@ -18,10 +18,15 @@ package com.datastax.oss.driver.api.testinfra.ccm;
 import com.datastax.oss.driver.api.core.DefaultProtocolVersion;
 import com.datastax.oss.driver.api.core.ProtocolVersion;
 import com.datastax.oss.driver.api.core.Version;
+import com.datastax.oss.driver.api.core.metadata.EndPoint;
 import com.datastax.oss.driver.api.testinfra.CassandraRequirement;
 import com.datastax.oss.driver.api.testinfra.CassandraResourceRule;
 import com.datastax.oss.driver.api.testinfra.DseRequirement;
+import com.datastax.oss.driver.internal.core.metadata.DefaultEndPoint;
+import java.net.InetSocketAddress;
+import java.util.Collections;
 import java.util.Optional;
+import java.util.Set;
 import org.junit.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
@@ -55,6 +60,13 @@ public abstract class BaseCcmRule extends CassandraResourceRule {
     ccmBridge.remove();
   }
 
+  @Override
+  public Set<EndPoint> getContactPoints() {
+    return Collections.singleton(
+        new DefaultEndPoint(
+            new InetSocketAddress(String.format("127.0.%s.1", ccmBridge.idPrefix), 9042)));
+  }
+
   private Statement buildErrorStatement(
       Version requirement, String description, boolean lessThan, boolean dse) {
     return new Statement() {
diff --git c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index c41aa0b27..623449969 100644
--- c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -59,8 +59,6 @@ public class CcmBridge implements AutoCloseable {
 
   private final AtomicBoolean created = new AtomicBoolean();
 
-  private final String ipPrefix;
-
   private final Map<String, Object> cassandraConfiguration;
   private final Map<String, Object> dseConfiguration;
   private final List<String> rawDseYaml;
@@ -72,6 +70,10 @@ public class CcmBridge implements AutoCloseable {
   public static final Version VERSION =
       Objects.requireNonNull(Version.parse(System.getProperty("ccm.version", "3.11.0")));
 
+  public String idPrefix = "0";
+
+  public static final String SCYLLA_VERSION = System.getProperty("scylla.version");
+
   public static final String INSTALL_DIRECTORY = System.getProperty("ccm.directory");
 
   public static final String BRANCH = System.getProperty("ccm.branch");
@@ -129,7 +131,7 @@ public class CcmBridge implements AutoCloseable {
   private CcmBridge(
       Path configDirectory,
       int[] nodes,
-      String ipPrefix,
+      String idPrefix,
       Map<String, Object> cassandraConfiguration,
       Map<String, Object> dseConfiguration,
       List<String> dseConfigurationRawYaml,
@@ -148,7 +150,7 @@ public class CcmBridge implements AutoCloseable {
     } else {
       this.nodes = nodes;
     }
-    this.ipPrefix = ipPrefix;
+    this.idPrefix = idPrefix;
     this.cassandraConfiguration = cassandraConfiguration;
     this.dseConfiguration = dseConfiguration;
     this.rawDseYaml = dseConfigurationRawYaml;
@@ -194,24 +196,6 @@ public class CcmBridge implements AutoCloseable {
     }
   }
 
-  private String getCcmVersionString(Version version) {
-    // for 4.0 pre-releases, the CCM version string needs to be "4.0-alpha1" or "4.0-alpha2"
-    // Version.toString() always adds a patch value, even if it's not specified when parsing.
-    if (version.getMajor() == 4
-        && version.getMinor() == 0
-        && version.getPatch() == 0
-        && version.getPreReleaseLabels() != null) {
-      // truncate the patch version from the Version string
-      StringBuilder sb = new StringBuilder();
-      sb.append(version.getMajor()).append('.').append(version.getMinor());
-      for (String preReleaseString : version.getPreReleaseLabels()) {
-        sb.append('-').append(preReleaseString);
-      }
-      return sb.toString();
-    }
-    return version.toString();
-  }
-
   public void create() {
     if (created.compareAndSet(false, true)) {
       if (INSTALL_DIRECTORY != null) {
@@ -220,7 +204,7 @@ public class CcmBridge implements AutoCloseable {
         createOptions.add("-v git:" + BRANCH.trim().replaceAll("\"", ""));
 
       } else {
-        createOptions.add("-v " + getCcmVersionString(VERSION));
+        createOptions.add("-v " + SCYLLA_VERSION);
       }
       if (DSE_ENABLEMENT) {
         createOptions.add("--dse");
@@ -228,18 +212,20 @@ public class CcmBridge implements AutoCloseable {
       execute(
           "create",
           CLUSTER_NAME,
-          "-i",
-          ipPrefix,
+          "--scylla",
+          "--id",
+          idPrefix,
           "-n",
           Arrays.stream(nodes).mapToObj(n -> "" + n).collect(Collectors.joining(":")),
           createOptions.stream().collect(Collectors.joining(" ")));
-
       for (Map.Entry<String, Object> conf : cassandraConfiguration.entrySet()) {
         execute("updateconf", String.format("%s:%s", conf.getKey(), conf.getValue()));
+        // logger.warn("skipping ({}:{})", conf.getKey(), conf.getValue());
       }
       if (getCassandraVersion().compareTo(Version.V2_2_0) >= 0) {
-        execute("updateconf", "enable_user_defined_functions:true");
+        execute("updateconf", "enable_user_defined_functions:true", "experimental:true");
       }
+
       if (DSE_ENABLEMENT) {
         for (Map.Entry<String, Object> conf : dseConfiguration.entrySet()) {
           execute("updatedseconf", String.format("%s:%s", conf.getKey(), conf.getValue()));
@@ -306,9 +292,9 @@ public class CcmBridge implements AutoCloseable {
 
   public void add(int n, String dc) {
     if (getDseVersion().isPresent()) {
-      execute("add", "-i", ipPrefix + n, "-d", dc, "node" + n, "--dse");
+      execute("add", "--scylla", "-d", dc, "node" + n, "--dse");
     } else {
-      execute("add", "-i", ipPrefix + n, "-d", dc, "node" + n);
+      execute("add", "--scylla", "-d", dc, "node" + n);
     }
     start(n);
   }
@@ -324,6 +310,7 @@ public class CcmBridge implements AutoCloseable {
             + " --config-dir="
             + configDirectory.toFile().getAbsolutePath();
 
+    logger.warn("Executing: " + command);
     execute(CommandLine.parse(command));
   }
 
@@ -428,7 +415,7 @@ public class CcmBridge implements AutoCloseable {
     private final Map<String, Object> dseConfiguration = new LinkedHashMap<>();
     private final List<String> dseRawYaml = new ArrayList<>();
     private final List<String> jvmArgs = new ArrayList<>();
-    private String ipPrefix = "127.0.0.";
+    private String idPrefix = "0";
     private final List<String> createOptions = new ArrayList<>();
     private final List<String> dseWorkloads = new ArrayList<>();
 
@@ -438,13 +425,13 @@ public class CcmBridge implements AutoCloseable {
       try {
         this.configDirectory = Files.createTempDirectory("ccm");
         // mark the ccm temp directories for deletion when the JVM exits
-        this.configDirectory.toFile().deleteOnExit();
+        // this.configDirectory.toFile().deleteOnExit();
       } catch (IOException e) {
         // change to unchecked for now.
         throw new RuntimeException(e);
       }
       // disable auto_snapshot by default to reduce disk usage when destroying schema.
-      withCassandraConfiguration("auto_snapshot", "false");
+      // withCassandraConfiguration("auto_snapshot", "false");
     }
 
     public Builder withCassandraConfiguration(String key, Object value) {
@@ -472,8 +459,8 @@ public class CcmBridge implements AutoCloseable {
       return this;
     }
 
-    public Builder withIpPrefix(String ipPrefix) {
-      this.ipPrefix = ipPrefix;
+    public Builder withIdPrefix(String idPrefix) {
+      this.idPrefix = idPrefix;
       return this;
     }
 
@@ -525,7 +512,7 @@ public class CcmBridge implements AutoCloseable {
       return new CcmBridge(
           configDirectory,
           nodes,
-          ipPrefix,
+          idPrefix,
           cassandraConfiguration,
           dseConfiguration,
           dseRawYaml,
diff --git c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
index 4ea1b3843..45029cc10 100644
--- c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
+++ w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
@@ -15,6 +15,7 @@
  */
 package com.datastax.oss.driver.api.testinfra.ccm;
 
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -30,6 +31,8 @@ public class CustomCcmRule extends BaseCcmRule {
 
   private static final AtomicReference<CustomCcmRule> CURRENT = new AtomicReference<>();
 
+  private static AtomicInteger cluster_id = new AtomicInteger(1);
+
   CustomCcmRule(CcmBridge ccmBridge) {
     super(ccmBridge);
   }
@@ -62,6 +65,10 @@ public class CustomCcmRule extends BaseCcmRule {
 
     private final CcmBridge.Builder bridgeBuilder = CcmBridge.builder();
 
+    public Builder() {
+      this.withIdPrefix(Integer.toString(cluster_id.incrementAndGet()));
+    }
+
     public Builder withNodes(int... nodes) {
       bridgeBuilder.withNodes(nodes);
       return this;
@@ -112,6 +119,11 @@ public class CustomCcmRule extends BaseCcmRule {
       return this;
     }
 
+    public Builder withIdPrefix(String idPrefix) {
+      bridgeBuilder.withIdPrefix(idPrefix);
+      return this;
+    }
+
     public CustomCcmRule build() {
       return new CustomCcmRule(bridgeBuilder.build());
     }
diff --git c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/DefaultCcmBridgeBuilderCustomizer.java w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/DefaultCcmBridgeBuilderCustomizer.java
index 8dfe6e99b..675973cca 100644
--- c/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/DefaultCcmBridgeBuilderCustomizer.java
+++ w/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/DefaultCcmBridgeBuilderCustomizer.java
@@ -22,8 +22,8 @@ public class DefaultCcmBridgeBuilderCustomizer {
   public static CcmBridge.Builder configureBuilder(CcmBridge.Builder builder) {
     if (!CcmBridge.DSE_ENABLEMENT
         && CcmBridge.VERSION.nextStable().compareTo(Version.V4_0_0) >= 0) {
-      builder.withCassandraConfiguration("enable_materialized_views", true);
-      builder.withCassandraConfiguration("enable_sasi_indexes", true);
+      //  builder.withCassandraConfiguration("enable_materialized_views", true);
+      //  builder.withCassandraConfiguration("enable_sasi_indexes", true);
     }
     return builder;
   }
